@inproceedings{LT2014:HPCS,
 abstract = {With the current generalization of parallel
architectures and increasing requirement of parallel
computation arises the concern of applying formal
methods, which allow specifications of parallel and
distributed programs to be precisely stated and the
conformance of an implementation to be verified
using mathematical techniques. However, the
complexity of parallel programs, compared to
sequential ones, makes them more error-prone and
difficult to verify.  This calls for a strongly
structured form of parallelism which should not only
be equipped with an abstraction or model that
conceals much of the complexity of parallel
computation, but also provide a systematic way of
developing such parallelism from specifications for
practically nontrivial examples.  Transformational
programming is a methodology that offers some scope
for making the construction of efficient programs
more mathematical.  Program calculation is a kind of
program transformation based on the theory of
constructive algorithmics.  An efficient program is
derived step-by-step through a sequence of
transformations that preserve the meaning and hence
the correctness. With suitable data-structures,
program calculation can be used for writing parallel
programs.  However, once an efficient (and correct
with respect to the initial specification)
formulation of the program is obtained through
transformations, the program is then implemented
using a parallel library of algorithmic skeletons
most of the time written in C++ with calls to a
communication library such as MPI.  There is no
formal correspondence between the efficient program
obtained by transformation and the C++ skeletal
program. Moreover the transformation itself is
usually a pen-and-paper process that could contain
errors.  The \textscSyDPaCC system is a set of
libraries for the Coq proof assistant that allows to
write naive functional programs then to transform
them into efficient versions that could be
automatically parallelised within the framework
before being extracted from Coq to real code in the
functional language OCaml plus calls to the parallel
functional programming library Bulk Synchronous
Parallel ML The tutorial is an introduction to the
Coq proof assistant and the \textscSyDPaCC system
for the systematic development of correct and
verified parallel programs. },
 author = {Loulergue, Frédéric and Tesson, Julien},
 booktitle = {International Conference on High Performance
Computing and Simulation (HPCS)},
 doi = {10.1109/HPCSim.2014.6903655},
 hlpp_category = {tutorial_presentation},
 publisher = {IEEE},
 title = {Certified Parallel Program Calculation in Coq: A
Tutorial},
 year = {2014}
}

